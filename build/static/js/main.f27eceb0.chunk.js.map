{"version":3,"sources":["butter-client.js","components/Header/HeaderComponent.jsx","components/Article/ArticleComponent.jsx","components/Portfolio/PortfolioComponent.jsx","components/Skills/SkillsComponent.jsx","components/Footer/FooterComponent.jsx","pages/Homepage/Homepage.jsx","pages/Contact/ContactPage.jsx","App.js","serviceWorker.js","index.js"],"names":["butter","Butter","Header","header","role","className","style","backgroundImage","hero_image","src","logo_image","alt","logo_alt","headline","sub_headline","Article","article","title","body","href","Portfolio","portfolio","portfolio_title","map","screenshot","index","key","thumbnail","thumbnail_alt","text","Skills","skills","skills_title","skill","idx","logo","Footer","footer","Homepage","ContactPage","state","fields","contact_me","page","retrieve","resp","this","setState","data","contact_form","React","Component","App","props","Helmet","seo_title","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0ZAIeA,E,MAFAC,GAAO,4C,QCgBPC,G,MAfA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACE,4BAAQC,KAAK,SAASC,UAAU,cAC9BC,MAAO,CACLC,gBAAgB,OAAD,OAASJ,EAAOK,WAAhB,OAEjB,yBAAKH,UAAU,aACb,yBAAKI,IAAKN,EAAOO,WAAYC,IAAKR,EAAOS,WACzC,4BAAKT,EAAOU,UACZ,4BAAKV,EAAOW,kBCQLC,G,MAjBC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACjB,OACE,6BAASX,UAAU,qBACjB,4BAAKW,EAAQC,OACb,6BACE,2BAAID,EAAQE,MACZ,yBAAKb,UAAU,iBACb,uBAAGc,KAAK,yCAAyCd,UAAU,oBAA3D,uBAEA,uBAAGc,KAAK,yCAAyCd,UAAU,kBAA3D,sBCQKe,G,MAjBG,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OAChB,6BAAShB,UAAU,uBACjB,wBAAIA,UAAU,iBAAiBgB,EAAUC,iBACzC,4BACGD,EAAUE,KAAI,SAACC,EAAYC,GAC1B,OACE,wBAAIpB,UAAU,aAAaqB,IAAKD,GAC9B,yBAAKhB,IAAKe,EAAWG,UAAWhB,IAAKa,EAAWI,gBAChD,4BAAKJ,EAAWP,OAChB,2BAAIO,EAAWK,cCOZC,G,MAhBA,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACb,6BAAS1B,UAAU,oBACjB,wBAAIA,UAAU,iBAAiB0B,EAAOC,cACtC,4BACGD,EAAOR,KAAI,SAACU,EAAOC,GAClB,OACE,wBAAI7B,UAAU,aAAaqB,IAAKQ,GAC9B,4BAAKD,EAAMhB,OACX,yBAAKR,IAAKwB,EAAME,KAAMxB,IAAKsB,EAAMtB,cCC9ByB,G,MATA,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACb,4BAAQjC,KAAK,eACX,yBAAKC,UAAU,yBACb,sCAAW,uBAAGc,KAAK,0BAAR,aAAX,cACA,yBAAKV,IAAK4B,EAAOF,KAAMxB,IAAK0B,EAAO1B,UCmB1B2B,EAnBE,SAAC,GAKF,IAJdnC,EAIa,EAJbA,OACAa,EAGa,EAHbA,QACAK,EAEa,EAFbA,UACAU,EACa,EADbA,OACAM,EAAa,EAAbA,OACA,OACE,yBAAKhC,UAAU,gBACb,kBAAC,EAAD,CAAQF,OAAQA,IAChB,0BAAMC,KAAK,QACT,kBAAC,EAAD,CAASY,QAASA,IAClB,kBAAC,EAAD,CAAWK,UAAWA,IACtB,kBAAC,EAAD,CAAQU,OAAQA,KAElB,kBAAC,EAAD,CAAQM,OAAQA,M,OCaPE,G,wDA7Bb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXC,OAAQ,CACNC,WAAY,KALJ,E,gMAWO1C,EAAO2C,KAAKC,SAAS,IAAK,gB,OAAvCC,E,OACNC,KAAKC,SAAS,CAAEN,OAAQI,EAAKG,KAAKA,KAAKP,S,qIAIvC,IAAMA,EAASK,KAAKN,MAAMC,OAE1B,OACE,6BAASpC,UAAU,0BACjB,4BAAKoC,EAAOC,WAAWzB,OACvB,yBAAKZ,UAAU,gBACZoC,EAAOC,WAAWO,mB,GAvBHC,IAAMC,YC0CjBC,E,kDAtCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDb,MAAQ,CACXC,OAAQ,CACNtC,OAAQ,GACRa,QAAS,GACTK,UAAW,GACXU,OAAQ,GACRM,OAAQ,KATK,E,gMAeErC,EAAO2C,KAAKC,SAAS,IAAK,Y,OAAvCC,E,OACNC,KAAKC,SAAS,CAAEN,OAAQI,EAAKG,KAAKA,KAAKP,S,qIAIvC,IAAMA,EAASK,KAAKN,MAAMC,OAE1B,OACE,oCACE,kBAACa,EAAA,EAAD,KACE,+BAAQb,EAAOtC,OAAOoD,YAExB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAC3B,kBAAC,EAAajB,MAEjB,kBAAC,IAAD,CAAOgB,KAAK,eAAeE,UAAWpB,U,GAhC9BW,IAAMC,W,MCKJS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASP,OACP,kBAAC,IAAMQ,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f27eceb0.chunk.js","sourcesContent":["import Butter from 'buttercms';\n\nconst butter = Butter('14007530e98df328a8462b0f60f49c8d7d83860e');\n\nexport default butter;\n","import React from 'react';\nimport './Header.scss';\n\nconst Header = ({ header }) => {\n  return (\n    <header role='banner' className='header-main'\n      style={{\n        backgroundImage: `url(${header.hero_image})`\n      }}>\n      <div className='container'>\n        <img src={header.logo_image} alt={header.logo_alt} />\n        <h1>{header.headline}</h1>\n        <h4>{header.sub_headline}</h4>\n      </div>\n    </header>\n  )\n};\n\nexport default Header;\n","import React from 'react';\nimport './Article.scss';\n\nconst Article = ({ article }) => {\n  return (\n    <section className='container article'>\n      <h2>{article.title}</h2>\n      <div>\n        <p>{article.body}</p>\n        <div className='btn-container'>\n          <a href='https://www.linkedin.com/in/careybest/' className='btn linkedin-btn'>\n            Connect on LinkedIn</a>\n          <a href='https://my.indeed.com/p/careyb-n8x5j7o' className='btn indeed-btn'>\n            Indeed Resume</a>\n        </div>\n      </div>\n    </section>\n  )\n};\n\nexport default Article;","import React from 'react';\nimport './Portfolio.scss';\n\nconst Portfolio = ({ portfolio }) => (\n  <section className='container portfolio'>\n    <h2 className='section-title'>{portfolio.portfolio_title}</h2>\n    <ul>\n      {portfolio.map((screenshot, index) => {\n        return (\n          <li className='screenshot' key={index}>\n            <img src={screenshot.thumbnail} alt={screenshot.thumbnail_alt} />\n            <h3>{screenshot.title}</h3>\n            <p>{screenshot.text}</p>\n          </li>\n        )\n      })}\n    </ul>\n  </section>\n);\n\nexport default Portfolio;","import React from 'react';\nimport './Skills.scss';\n\nconst Skills = ({ skills }) => (\n  <section className='container skills'>\n    <h2 className='section-title'>{skills.skills_title}</h2>\n    <ul>\n      {skills.map((skill, idx) => {\n        return (\n          <li className='screenshot' key={idx}>\n            <h4>{skill.title}</h4>\n            <img src={skill.logo} alt={skill.alt} />\n          </li>\n        )\n      })}\n    </ul>\n  </section>\n);\n\nexport default Skills;","import React from 'react';\nimport './Footer.scss';\n\nconst Footer = ({ footer }) => (\n  <footer role='contentinfo'>\n    <div className='container page-footer'>\n      <p>Powered <a href=\"https://buttercms.com/\">ButterCMS</a> and React</p>\n      <img src={footer.logo} alt={footer.alt} />\n    </div>\n  </footer>\n);\n\nexport default Footer;\n","import React from 'react';\nimport Header from '../../components/Header/HeaderComponent';\nimport Article from '../../components/Article/ArticleComponent';\nimport Portfolio from '../../components/Portfolio/PortfolioComponent';\nimport Skills from '../../components/Skills/SkillsComponent';\nimport Footer from '../../components/Footer/FooterComponent';\n\nconst Homepage = ({\n  header,\n  article,\n  portfolio,\n  skills,\n  footer }) => {\n  return (\n    <div className='page-wrapper'>\n      <Header header={header} />\n      <main role='main'>\n        <Article article={article} />\n        <Portfolio portfolio={portfolio} />\n        <Skills skills={skills} />\n      </main>\n      <Footer footer={footer} />\n    </div>\n  )\n};\n\nexport default Homepage;\n","import React from 'react';\nimport butter from '../../butter-client.js';\nimport './Contact.scss';\n\nclass ContactPage extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      fields: {\n        contact_me: []\n      }\n    }\n  }\n\n  async componentDidMount() {\n    const resp = await butter.page.retrieve('*', 'contact-page');\n    this.setState({ fields: resp.data.data.fields });\n  }\n\n  render() {\n    const fields = this.state.fields;\n\n    return (\n      <section className='container contact-page'>\n        <h2>{fields.contact_me.title}</h2>\n        <div className='form-wrapper'>\n          {fields.contact_me.contact_form}\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default ContactPage;","import React from 'react';\nimport butter from './butter-client.js'\nimport { Helmet } from 'react-helmet'\nimport Homepage from './pages/Homepage/Homepage';\nimport { Switch, Route } from 'react-router-dom';\nimport ContactPage from './pages/Contact/ContactPage.jsx';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      fields: {\n        header: '',\n        article: '',\n        portfolio: [],\n        skills: [],\n        footer: []\n      }\n    }\n  }\n\n  async componentDidMount() {\n    const resp = await butter.page.retrieve('*', 'homepage');\n    this.setState({ fields: resp.data.data.fields });\n  }\n\n  render() {\n    const fields = this.state.fields;\n\n    return (\n      <>\n        <Helmet>\n          <title>{fields.header.seo_title}</title>\n        </Helmet>\n        <Switch>\n          <Route exact path=\"/\" render={() =>\n            (<Homepage {...fields} />)\n          } />\n          <Route path='/ContactPage' component={ContactPage} />\n        </Switch>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}