{"version":3,"sources":["butter-client.js","components/Header/HeaderComponent.jsx","components/Article/ArticleComponent.jsx","components/Portfolio/PortfolioComponent.jsx","components/Skills/SkillsComponent.jsx","components/Footer/FooterComponent.jsx","pages/Homepage/Homepage.jsx","App.js","serviceWorker.js","index.js"],"names":["butter","Butter","Header","fields","console","log","header","headline","role","className","style","backgroundImage","hero_image","src","logo_image","alt","logo_alt","sub_headline","Article","article","title","body","Portfolio","portfolio_title","portfolio","map","port","index","key","thumbnail","thumbnail_alt","text","Skills","skills_title","skills","skill","idx","logo","Footer","href","footer","Homepage","App","props","state","this","match","page","retrieve","resp","setState","data","Helmet","seo_title","React","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kZAIeA,E,MAFAC,GAAO,4C,QCiBPC,G,YAhBA,SAACC,GAEd,OADAC,QAAQC,IAAI,WAAZ,UAA2BF,EAAOG,OAAOC,WAEvC,4BAAQC,KAAK,SAASC,UAAU,cAC9BC,MAAO,CACLC,gBAAgB,OAAD,OAASR,EAAOG,OAAOM,WAAvB,OAEjB,yBAAKH,UAAU,aACb,yBAAKI,IAAKV,EAAOG,OAAOQ,WAAYC,IAAKZ,EAAOG,OAAOU,WACvD,4BAAKb,EAAOG,OAAOC,UACnB,4BAAKJ,EAAOG,OAAOW,kBCDZC,G,MATC,SAACf,GAAD,OACd,6BAASM,UAAU,qBACjB,4BAAKN,EAAOgB,QAAQC,OACpB,6BACE,2BAAIjB,EAAOgB,QAAQE,UCaVC,G,MAjBG,SAACnB,GAAD,OAChB,6BAASM,UAAU,uBACjB,wBAAIA,UAAU,iBAAiBN,EAAOoB,iBACtC,4BACGpB,EAAOqB,UAAUC,KAAI,SAACC,EAAMC,GAC3B,OACE,wBAAIlB,UAAU,aAAamB,IAAKD,GAC9B,yBAAKd,IAAKa,EAAKG,UAAWd,IAAKW,EAAKI,gBACpC,4BAAKJ,EAAKN,OACV,2BAAIM,EAAKK,cCONC,G,MAhBA,SAAC7B,GAAD,OACb,6BAASM,UAAU,oBACjB,wBAAIA,UAAU,iBAAiBN,EAAO8B,cACtC,4BACG9B,EAAO+B,OAAOT,KAAI,SAACU,EAAOC,GACzB,OACE,wBAAI3B,UAAU,aAAamB,IAAKQ,GAC9B,4BAAKD,EAAMf,OACX,yBAAKP,IAAKsB,EAAME,KAAMtB,IAAKoB,EAAMpB,cCC9BuB,G,MATA,SAACnC,GAAD,OACb,4BAAQK,KAAK,eACX,yBAAKC,UAAU,yBACb,sCAAW,uBAAG8B,KAAK,0BAAR,aAAX,cACA,yBAAK1B,IAAKV,EAAOqC,OAAOH,KAAMtB,IAAKZ,EAAOqC,OAAOzB,UCexC0B,EAdE,SAACtC,GAChB,OACE,yBAAKM,UAAU,gBACb,kBAAC,EAAWN,GACZ,0BAAMK,KAAK,QACT,kBAAC,EAAYL,GACb,kBAAC,EAAcA,GACf,kBAAC,EAAWA,IAEd,kBAAC,EAAWA,KCuBHuC,E,kDAlCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXzC,OAAQ,CACNG,OAAQ,GACRa,QAAS,GACTK,UAAW,GACXU,OAAQ,GACRM,OAAQ,KATK,E,uLAeCK,KAAKF,MAAfG,M,SACW9C,EAAO+C,KAAKC,SAAS,IAAK,Y,OAAvCC,E,OACNJ,KAAKK,SAAS,CAAE/C,OAAQ8C,EAAKE,KAAKA,KAAKhD,S,qIAIvC,IAAMA,EAAS0C,KAAKD,MAAMzC,OAE1B,OACE,oCACE,kBAACiD,EAAA,EAAD,KACE,+BAAQjD,EAAOG,OAAO+C,YAExB,kBAAC,EAAalD,Q,GA7BJmD,IAAMC,W,MCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASb,MACvB,2DCZNc,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpE,QAAQoE,MAAMA,EAAMC,c","file":"static/js/main.221900cc.chunk.js","sourcesContent":["import Butter from 'buttercms';\n\nconst butter = Butter('14007530e98df328a8462b0f60f49c8d7d83860e');\n\nexport default butter;\n","import React from 'react';\nimport './Header.scss';\n\nconst Header = (fields) => {\n  console.log('THE DATA', `${fields.header.headline}`);\n  return (\n    <header role='banner' className='header-main'\n      style={{\n        backgroundImage: `url(${fields.header.hero_image})`\n      }}>\n      <div className='container'>\n        <img src={fields.header.logo_image} alt={fields.header.logo_alt} />\n        <h1>{fields.header.headline}</h1>\n        <h4>{fields.header.sub_headline}</h4>\n      </div>\n    </header>\n  )\n};\n\nexport default Header;\n","import React from 'react';\nimport './Article.scss';\n\nconst Article = (fields) => (\n  <section className='container article'>\n    <h2>{fields.article.title}</h2>\n    <div>\n      <p>{fields.article.body}</p>\n    </div>\n  </section>\n);\n\nexport default Article;","import React from 'react';\nimport './Portfolio.scss';\n\nconst Portfolio = (fields) => (\n  <section className='container portfolio'>\n    <h2 className='section-title'>{fields.portfolio_title}</h2>\n    <ul>\n      {fields.portfolio.map((port, index) => {\n        return (\n          <li className='screenshot' key={index}>\n            <img src={port.thumbnail} alt={port.thumbnail_alt} />\n            <h3>{port.title}</h3>\n            <p>{port.text}</p>\n          </li>\n        )\n      })}\n    </ul>\n  </section>\n);\n\nexport default Portfolio;","import React from 'react';\nimport './Skills.scss';\n\nconst Skills = (fields) => (\n  <section className='container skills'>\n    <h2 className='section-title'>{fields.skills_title}</h2>\n    <ul>\n      {fields.skills.map((skill, idx) => {\n        return (\n          <li className='screenshot' key={idx}>\n            <h4>{skill.title}</h4>\n            <img src={skill.logo} alt={skill.alt} />\n          </li>\n        )\n      })}\n    </ul>\n  </section>\n);\n\nexport default Skills;","import React from 'react';\nimport './Footer.scss';\n\nconst Footer = (fields) => (\n  <footer role='contentinfo'>\n    <div className='container page-footer'>\n      <p>Powered <a href=\"https://buttercms.com/\">ButterCMS</a> and React</p>\n      <img src={fields.footer.logo} alt={fields.footer.alt} />\n    </div>\n  </footer>\n);\n\nexport default Footer;\n","import React from 'react';\nimport './Homepage.scss';\nimport Header from '../../components/Header/HeaderComponent';\nimport Article from '../../components/Article/ArticleComponent';\nimport Portfolio from '../../components/Portfolio/PortfolioComponent';\nimport Skills from '../../components/Skills/SkillsComponent';\nimport Footer from '../../components/Footer/FooterComponent';\n\nconst Homepage = (fields) => {\n  return (\n    <div className='page-wrapper'>\n      <Header {...fields} />\n      <main role='main'>\n        <Article {...fields} />\n        <Portfolio {...fields} />\n        <Skills {...fields} />\n      </main>\n      <Footer {...fields} />\n    </div>\n  )\n};\n\nexport default Homepage;\n","import React from 'react';\nimport butter from './butter-client.js'\nimport { Helmet } from 'react-helmet'\nimport Homepage from './pages/Homepage/Homepage';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      fields: {\n        header: '',\n        article: '',\n        portfolio: [],\n        skills: [],\n        footer: []\n      }\n    }\n  }\n\n  async componentDidMount() {\n    const { match } = this.props;\n    const resp = await butter.page.retrieve('*', 'homepage');\n    this.setState({ fields: resp.data.data.fields });\n  }\n\n  render() {\n    const fields = this.state.fields;\n\n    return (\n      <>\n        <Helmet>\n          <title>{fields.header.seo_title}</title>\n        </Helmet>\n        <Homepage {...fields} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}